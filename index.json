[{"categories":["spfx"],"contents":"    The GitHub solution showcasing the integration is available here: https://github.com/FranckyC/spfx-tailwind-sample/tree/develop    To handle CSS customizations, the SharePoint framework comes with a prebuilt mechanism in its toolchain. Basically, all SASS or CSS stylesheets can be treated as TypeScript modules (ex: mycomponent.module.scss). This way, you can directly reference classes in your components using a styles variable imported from the generated .ts module:\nimport styles from \u0026#39;./todoList.module.scss\u0026#39;; // ...  export default class TodoList extends React.Component\u0026lt;ITodoListProps, void\u0026gt; {  public render(): React.ReactElement\u0026lt;ITodoListProps\u0026gt; {  return (  \u0026lt;div className={styles.todoList}\u0026gt;  \u0026lt;div className={styles.text}\u0026gt;Hello world\u0026lt;/div\u0026gt;  \u0026lt;/div\u0026gt;  );  } } Behind the scenes, SPFx generates unique names for CSS classes to avoid name conflitcs with other components on the page and also handle CSS vendors specifities (ex: IE10/11, Safari, etc) for you.\nSo what\u0026rsquo;s the problem?\nFor simple solutions wih few components and stylesheets, this mechanism is easy to use and works well. However, for more complex solutions including many components and sub components, this approach has some limits.\nAs an developer, writing CSS is not my primary skill and not really a passion (and I\u0026rsquo;m probably not the only one there). Often I get overwhelmed by SCSS stylesheets sprawling in my project structure as long as my solution is evolving. I often need to reorganize, delete or update parts of SCSS stylesheets. I also don\u0026rsquo;t talk about hours I\u0026rsquo;ve spent fixing dummy CSS issues\u0026hellip;\nWhen writing CSS, you always have to think about naming conventions, containers hierachy, styles reusability, shared variables, etc. According to your components structure and complexity (ex: if your components needs to support theme), this is a time consuming and a cumbersome process as there is no easy way to keep in sync CSS classes usages and declarations in the code. Often, some CSS code parts aren\u0026rsquo;t actually used in my solution due to these multiple changes increasing bundle size and I always feel my styles could have been organized better.\n As an example, I\u0026rsquo;m pretty sure many CSS classes declared in the PnP Modern Search are not actually used in the code! Anyway..\n But what if you could speed up the CSS writing process, or better, completely getting rid of these numerous stylesheets and avoid writing a single line of CSS code?\nA dream for every developer no ?\nWell let\u0026rsquo;s talk about TailwindCSS.\nWhat is TailwindCSS? From the offical webiste, TailwindCSS is a utility-first CSS framework packed with predefined classes that can be composed to build any design, directly in your markup. It works only at build time.\nHow it works?\nDuring the build time, the tool scans all files defined according to your configuration (ex: all .ts, .tsx files specified in the tailwind.config.js) looking for well-known classes from the library set and generates the corresponding CSS classes. The stylesheet can then be imported into your components and classes used directly.\nWhat are the benefits?\nAt a glance:\n No more stylesheets to manage or CSS to write. You only use well known, predefined CSS classes from the library set. You don\u0026rsquo;t have to worry how it is done behind the scenes in CSS. You ship only the CSS you actually use in your code. No more dead CSS bloating your bundle. Numerous CSS utility classes to build awesome UI in minutes for non CSS specialists (like me). Many examples available from the community (paid or free depending the complexity). Heavily customizable and enough flexibility to cover edge cases. Can be integrated with any framework. Super easy light/dark mode support.  Integration with the SharePoint Framework When building the PnP Modern Search Core components and also their SPFx WebParts integration, I decided to give a try to TailwindCSS. In my company, it was already a well known library used by maby internal projects.\n I have to say, I probably never go back to traditional CSS/SASS stylesheets anymore. It saved me so much time and allowed me to create such better experiences than can\u0026rsquo;t even think doing the same writing my own CSS\n Setup TailwindCSS in your SPFx project First of all, if you work with Visual Studio Code, you can install the Tailwind CSS IntelliSense extension. Then:\n Add the TailwindCSS package in your package.json file under the devDependencies (remember, it works only at build time):  {  \u0026#34;devDependencies\u0026#34;: {  ...  \u0026#34;tailwindcss\u0026#34;: \u0026#34;3.2.4\u0026#34;,  \u0026#34;@tailwindcss/forms\u0026#34;: \u0026#34;0.5.3\u0026#34;,  } } At the root of your solution, create a tailwind.config.js file, with this default configuration:   const defaultTheme = require(\u0026#39;tailwindcss/defaultTheme\u0026#39;);  module.exports = {  mode: \u0026#39;jit\u0026#39;, // allow to update CSS classes automatically when a file is updated (watch mode). See below  content: {  files: [  \u0026#39;./src/**/*.{html,ts,tsx}\u0026#39;, // scan for these files in the solution  ]  },  corePlugins: {  preflight: false, // to avoid conflict with base SPFx styles otherwise (ex: buttons background-color)  },  darkMode: \u0026#39;class\u0026#39;,  theme: {  extend: {  fontFamily: {  sans: [\u0026#39;var(--myWebPart-fontPrimary)\u0026#39;,\u0026#39;Roboto\u0026#39;, ...defaultTheme.fontFamily.sans]  },  colors: {   /* light/dark is controlled by the theme values at WebPart level */  primary: \u0026#34;var(--myWebPart-primary, #7C4DFF)\u0026#34;,  background: \u0026#34;var(--myWebPart-background, #F3F5F6)\u0026#34;,  link: \u0026#34;var(--myWebPart-link, #1E252B)\u0026#34;,  linkHover: \u0026#34;var(--myWebPart-linkHover, #1E252B)\u0026#34;,  bodyText: \u0026#34;var(--myWebPart-bodyText, #1E252B)\u0026#34;  }  }  },  plugins: [  require(\u0026#39;@tailwindcss/forms\u0026#39;), // to be able to style inputs  ], }; This file contains basic TailwindCSS customizations for a SPFx project (CSS variables, plugins, etc.).\nCreate a styles folder in your project structure (ex: /src/styles) and create the two following files in it:   tailwind.css: this file is used as an entry point for TailwindCSS to generate your styles. It defines all the base classes you want to support.  @tailwind base; @tailwind components; @tailwind utilities;  postcss.config.js: this file is used by PostCSS to define what CSS transformations need to be done through plugins (like tailwindcss but also handling the vendors prefix support using autoprefixer plugin). This is the preferred way to run TailwindCSS along other build tools.  module.exports = {  plugins: {  tailwindcss: {},  autoprefixer: {},  } }  You can use any other PostCSS plugins you want here.\n Update your package.json to use following scripts. Also add the package npm-run-all to be able to run multiple scripts in parallel:  \u0026#34;scripts\u0026#34;: {  \u0026#34;build\u0026#34;: \u0026#34;gulp bundle\u0026#34;,  \u0026#34;build:ship\u0026#34;: \u0026#34;gulp bundle --ship\u0026#34;,  \u0026#34;clean\u0026#34;: \u0026#34;gulp clean\u0026#34;,  \u0026#34;test\u0026#34;: \u0026#34;gulp test\u0026#34;,  \u0026#34;bundle\u0026#34;: \u0026#34;npm-run-all taildwindcss build\u0026#34;,  \u0026#34;bundle:ship\u0026#34;: \u0026#34;npm-run-all taildwindcss build:ship\u0026#34;,  \u0026#34;webpack:serve\u0026#34;: \u0026#34;fast-serve\u0026#34;,  \u0026#34;serve\u0026#34;: \u0026#34;npm-run-all -p tailwindcss:watch webpack:serve\u0026#34;,  \u0026#34;taildwindcss\u0026#34;: \u0026#34;tailwindcss -i ./src/styles/tailwind.css -o ./src/styles/dist/tailwind.css --minify --postcss ./src/styles/postcss.config.js\u0026#34;,  \u0026#34;tailwindcss:watch\u0026#34;: \u0026#34;tailwindcss -i ./src/styles/tailwind.css -o ./src/styles/dist/tailwind.css --watch --minify --postcss ./src/styles/postcss.config.js\u0026#34; } {  \u0026#34;devDependencies\u0026#34;: {  ...  \u0026#34;npm-run-all\u0026#34;: \u0026#34;^4.1.5\u0026#34;  } }  I use SPFx Fast Serve tool here for convenience\n Some explanation here:\n \u0026quot;taildwindcss\u0026quot;: \u0026quot;tailwindcss -i ./src/styles/tailwind.css -o ./src/styles/dist/tailwind.css --minify --postcss ./src/styles/postcss.config.js\u0026quot;: generate the CSS stylesheet from the tailwindcss.css file using PostCSS and output the result in a /dist folder. This is this file you need to include in your code. \u0026quot;tailwindcss:watch\u0026quot;: \u0026quot;tailwindcss -i ./src/styles/tailwind.css -o ./src/styles/dist/tailwind.css --watch --minify --postcss ./src/styles/postcss.config.js\u0026quot;: same as above but in watch mode using the Just-in-Time feature. CSS classes will regenerate when your code is updated. \u0026quot;webpack:serve\u0026quot;: \u0026quot;fast-serve\u0026quot;: just a wrapper script for fast serve. \u0026quot;serve\u0026quot;: \u0026quot;npm-run-all -p tailwindcss:watch webpack:serve\u0026quot;: run the SPFx WebPart build and also TailwindCSS in watch mode using its \u0026lsquo;Just-in-time\u0026rsquo; feature. To get it work with TailwindCSS, the flag mode: 'jit' needs to be set in the tailwind.config.js configuration file. code. \u0026quot;bundle\u0026quot;: \u0026quot;npm-run-all taildwindcss build\u0026quot;: bundle the SPFx solution including TailwindCSS compilation first.  Import the stylesheet in your component and use TailwindCSS classes:  import \u0026#39;../../styles/dist/tailwind.css\u0026#39;; ...  return (  \u0026lt;section className=\u0026#39;overflow-hidden p-1 text-bodyText bg-background font-sans\u0026#39;\u0026gt;  \u0026lt;div className=\u0026#34;text-center\u0026#34;\u0026gt;  \u0026lt;img alt=\u0026#34;\u0026#34; src={isDarkTheme ? require(\u0026#39;../assets/welcome-dark.png\u0026#39;) : require(\u0026#39;../assets/welcome-light.png\u0026#39;)} className={\u0026#34;w-full max-w-[420px]\u0026#34;} /\u0026gt;  \u0026lt;h2\u0026gt;Well done, {escape(userDisplayName)}!\u0026lt;/h2\u0026gt;  \u0026lt;div\u0026gt;{environmentMessage}\u0026lt;/div\u0026gt;  \u0026lt;div\u0026gt;Web part property value: \u0026lt;strong\u0026gt;{escape(description)}\u0026lt;/strong\u0026gt;\u0026lt;/div\u0026gt;  \u0026lt;/div\u0026gt;  ...  \u0026lt;/section\u0026gt;  As there is only one generated file and classes are global, it can be imported pretty much anywhere in your code as long it is included in your bundle.\n Serve your solution using npm run serve et voilà!:  Advanced scenarios Deal with the dark mode In components, you often need to handle both light and dark modes according to the host theme selected (ex: on a SharePoint site). It means CSS classes used have to be aware of colors from the theme that should be applied. Despite TailwindCSS has its own way to handle dark mode, we can\u0026rsquo;t really rely on it with the SharePoint Framework (we could but this is not optimal in my opinion). By default, there is no \u0026ldquo;link\u0026rdquo; between TailwindCSS classes and SPFx theme values. We have to create one.\nThe beauty of TailwindCSS is it is very customizable. To create that \u0026rsquo;link\u0026rsquo; we simply extend the default theme definition in the TailwindCSS tailwind.config.js configuration file and use custom CSS variables for common colors (ex: body text, primary color, etc.):\n{  ...  theme: {  extend: {  fontFamily: {  sans: [\u0026#39;var(--myWebPart-fontPrimary)\u0026#39;,\u0026#39;Roboto\u0026#39;, ...defaultTheme.fontFamily.sans]  },  colors: {  primary: \u0026#34;var(--myWebPart-primary, #7C4DFF)\u0026#34;,  background: \u0026#34;var(--myWebPart-background, #F3F5F6)\u0026#34;,  link: \u0026#34;var(--myWebPart-link, #1E252B)\u0026#34;,  linkHover: \u0026#34;var(--myWebPart-linkHover, #1E252B)\u0026#34;,  bodyText: \u0026#34;var(--myWebPart-bodyText, #1E252B)\u0026#34;  }  }  } } These CSS variables are then set in the component according to the current theme values:\n// All CSS variables from my project export enum ThemeCSSVariables {  fontFamilyPrimary = \u0026#34;--myWebPart-fontPrimary\u0026#34;,  colorPrimary = \u0026#34;--myWebPart-primary\u0026#34;,  background = \u0026#34;--myWebPart-background\u0026#34;,  primaryBackgroundColorDark = \u0026#34;--myWebPart-colorBackgroundDarkPrimary\u0026#34;,  bodyText= \u0026#34;--myWebPart-bodyText\u0026#34;,  link = \u0026#34;--myWebPart-link\u0026#34;,  linkHover = \u0026#34;--myWebPart-linkHover\u0026#34;, }  ... // In the main WebPart class protected onThemeChanged(currentTheme: IReadonlyTheme | undefined): void {  if (!currentTheme) {  return;  }   this._isDarkTheme = !!currentTheme.isInverted;  const {  semanticColors  } = currentTheme;   if (semanticColors) {   // Map colors from the theme to CSS variables and therefore to TailwindCSS custom colors so they can be used in classes  this.domElement.style.setProperty(ThemeCSSVariables.colorPrimary, currentTheme?.palette?.themePrimary || null);  this.domElement.style.setProperty(ThemeCSSVariables.fontFamilyPrimary, currentTheme?.fonts?.medium?.fontFamily || null);  this.domElement.style.setProperty(ThemeCSSVariables.bodyText, semanticColors.bodyText || null);  this.domElement.style.setProperty(ThemeCSSVariables.link, semanticColors.link || null);  this.domElement.style.setProperty(ThemeCSSVariables.linkHover, semanticColors.linkHovered || null);  this.domElement.style.setProperty(ThemeCSSVariables.background, semanticColors.bodyBackground || null);  } } Then in components you can use the custom colors like this:\n\u0026lt;section className=\u0026#39;text-bodyText bg-background font-sans\u0026#39;\u0026gt;  ... \u0026lt;/section\u0026gt; Is there any drawbacks to use TailwindCSS with SPFx? Unfortunately yes, nothing is perfect! These are more considerations to have when you choose to use TailwindCSS over traditional SASS/CSS stylesheets. Among them:\n As TailwindCSS generates a big CSS stylesheet in the end, there is no more stylesheets isolation (ex: one stylesheet per component as best practice). It can be harder to quickly identify which component uses what classes if you defined a lot of custom classes via theme extentsions. If you have multiple Web Parts or extensions on the same page built from different projects/solutions independently, you will end up with duplicated declarations for CSS classes as each solution will generate its own stylesheet. It is not that critical but not optimal regarding the bundle sizes. Also there is no really a risk of name conflicts as class names are standardized. The only conflicts you could have is if other solutions defined the same custom extensions. To mitigate this point:  Try to build Web Parts or extensions from the same project using the same TailwindCSS configuration file. Avoid using different version of TailwindCSS across solutions.    Conclusion I hope you found this post useful and you will be curious to give it a try in your solutions. To me, TailwindCSS was a game changer in the way I work with the SharePoint Framework and even beyond. It saved me a lot of time in my projects and also probably improved my mental heath to not being forced to write CSS code anymore :D.\nBe careful: once you start to use it, you can\u0026rsquo;t go back 😁\n","date":"March 27, 2024","image":null,"permalink":"/post/using-tailwindcss-with-spfx/","title":"Use TailwindCSS with SPFx"},{"categories":["modern-search"],"contents":"Since the 4.6.0 version of the PnP Modern Search solution, you can now configure sort fields for SharePoint/Microsoft Search data sources for both default sort and user sort (i.e sort results from the UI). As a result the previous \u0026ldquo;Edit sort order\u0026rdquo; option for data sources has been renamed to \u0026ldquo;Edit sort settings\u0026rdquo;.\nThat was a long awaited feature already present in v3 but not migrated to v4 due to the new architecture. This is now fixed :D.\nWhat changes compared to previous versions? The first difference regarding the configuration is about the properties listed in the sort fields dropdown. Now the list is a static list representing all \u0026ldquo;Sortable\u0026rdquo; properties in the SharePoint search schema:\nHowever, if a property is missing or you need to use a custom property like RefinableString or RefinableDate, you can sill type the property name manually in the dropdown and press \u0026lsquo;Enter\u0026rsquo; to validate. Remember the property should be \u0026ldquo;Sortable\u0026rdquo; in the search schema to get it work as there is no error validation anymore.\nThen you can now decide for a property to be used either for default sorting or user sorting or both. For instance if you want to sort the results initialy by the Created managed property in ascending direction and also allow users to change this direction afterwards, you can set this property as user sort as well with a friendly name for users (i.e. the name that will appeart in the sort dropdown). You can also set other properties to only be sortable in the UI but not as default, like RefinableString01:\nOnce an user sort property is added in the configuration, a sort drop down control appears in the layout (if you don\u0026rsquo;t set any \u0026lsquo;User sort\u0026rsquo; property, the control does not appear):\n The dropdown control appears on all layouts (except the \u0026lsquo;Details List\u0026rsquo;)\n To sort results on a property, simply click on the property you want to sort in the list (1) and then select the direction (2) ascending or descending.\nHowever, here are few things to know about the sort control:\n  By default, when the page opens, the sort order will be the one represented by all properties set as \u0026lsquo;Default sort\u0026rsquo; in the configuration (all combined together according to the definition order).\n  You can\u0026rsquo;t preselect a property in the sort dropdown even if it is configured as a default sort property. It means users don\u0026rsquo;t kow what is the default sort order.\n  Although you can set multiple properties as user sort in the configuration, you can sort on only one property at a time in the UI.\n  The default sort direction when you click on a property is always ascending (and you can\u0026rsquo;t change this).\n  You can reset the default sort order by clicking on the \u0026ldquo;default\u0026rdquo; option:\n  Details list layout specificity We\u0026rsquo;ve also updated the Details List layout sort options to match this new behavior as it contains its own sort settings. Now in the column option you can make a specific column sortable by choosing among the properties you configured as \u0026lsquo;User sort\u0026rsquo; in the data source sort configuration (and only these ones):\nIn the update process, we\u0026rsquo;ve also removed the static sorting behavior since it was too confusing for users. Now when you sort a specific column, all resuts in the data set are sorted, not only the current page (i.e. a new search request is made):\nHope you will find this new feature useful! Don\u0026rsquo;t hesitate to provide your feedback in the GitHub repository.\n","date":"April 8, 2022","image":null,"permalink":"/post/modern-search-overview-sort-control/","title":"New sort feature with the 4.6.0 PnP Modern Search version!"},{"categories":["general"],"contents":"The new SharePoint Online content type hub is a really geat feature to ensure a standardized information architecture across the company. Compared to the previous version, a lot of improvements has been made, especially the synchronization process with consumer sites which is now much faster and convenient.\nHowever, to be able to add content types in a library or list coming from the hub in a specific SharePoint site, you must first synchronize them. Otherwise you will get a Not found error during the addition.\nIf like me, you work with the content type hub programmatically to provide site templates, here are some ways to do that depending your implementation strategy:\nSynchronize with CSOM and REST (example with a Logic App) Unfortunately, and as far as I know, there is no Microsoft Graph REST endpoint that can be used to do this synhronization for a single site. However, you can still use the SyncContentTypesFromHubSite2 CSOM method over the /_vti_bin/client.svc/ProcessQuery endpoint directly with the following XML payload (example):\n\u0026lt;Request xmlns=\u0026#34;http://schemas.microsoft.com/sharepoint/clientquery/2009\u0026#34; AddExpandoFieldTypeSuffix=\u0026#34;true\u0026#34; SchemaVersion=\u0026#34;15.0.0.0\u0026#34; LibraryVersion=\u0026#34;16.0.0.0\u0026#34; ApplicationName=\u0026#34;.NET Library\u0026#34;\u0026gt;  \u0026lt;Actions\u0026gt;  \u0026lt;Method Name=\u0026#34;SyncContentTypesFromHubSite2\u0026#34; Id=\u0026#34;107\u0026#34; ObjectPathId=\u0026#34;104\u0026#34;\u0026gt;  \u0026lt;Parameters\u0026gt;  \u0026lt;Parameter Type=\u0026#34;String\u0026#34;\u0026gt;https://yourtenant.sharepoint.com/sites/yoursite\u0026lt;/Parameter\u0026gt;  \u0026lt;Parameter Type=\u0026#34;Array\u0026#34;\u0026gt;  \u0026lt;Object Type=\u0026#34;String\u0026#34;\u0026gt;0x0101009679330D8335B9448FC3FFCD592FF7B3\u0026lt;/Object\u0026gt;  \u0026lt;Object Type=\u0026#34;String\u0026#34;\u0026gt;0x0101009D1CB255DA76424F860D91F20E6C411800DBFEC5E8F9D780498850457DA36850BE\u0026lt;/Object\u0026gt;  \u0026lt;/Parameter\u0026gt;  \u0026lt;/Parameters\u0026gt;  \u0026lt;/Method\u0026gt;  \u0026lt;/Actions\u0026gt;  \u0026lt;ObjectPaths\u0026gt;  \u0026lt;Constructor Id=\u0026#34;104\u0026#34; TypeId=\u0026#34;{618709d0-5c34-4b0a-bd15-0406f9e62cc2}\u0026#34; /\u0026gt;  \u0026lt;/ObjectPaths\u0026gt; \u0026lt;/Request\u0026gt;  From here, it is easy to build the parameters array with content type IDs to synchronize (ex: synchronize only a specific content type group in the hub):\n The XML payload shouldn\u0026rsquo;t contains any spaces.\n  The HTTP header Content-Type needs be set to \u0026quot;text/xml\u0026quot;.\n  The call with always return an HTTP 200 even if it does not succeed. To get the error details, you will need to parse the response manually.\n Use the buitlin addContentTypesFromHub action in a site script If you are using site designs/templates, you can also rely on the builtin addContentTypesFromHub action:\n{  \u0026#34;$schema\u0026#34;: \u0026#34;schema.json\u0026#34;,  \u0026#34;actions\u0026#34;: [  {  \u0026#34;verb\u0026#34;: \u0026#34;addContentTypesFromHub\u0026#34;,  \u0026#34;ids\u0026#34;: [\u0026#34;0x01007CE30DD1206047728BAFD1C39A850120\u0026#34;]  }  ],  \u0026#34;bindata\u0026#34;: {},  \u0026#34;version\u0026#34;: 1 } Use PnP PowerShell Last but not least, you can use the PnP.Powershell Add-PnPContentTypesFromContentTypeHub cmdlet. Basically it uses CSOM and SyncContentTypesFromHubSite2 behind the scenes.\nAdd-PnPContentTypesFromContentTypeHub -ContentTypes \u0026#34;0x010057C83E557396744783531D80144BD08D\u0026#34; -Site https://tenant.sharepoint.com/sites/HR ","date":"March 30, 2022","image":null,"permalink":"/post/synchronize_content_types_from_hub/","title":"Programmatically synchronize content types to a site from content type hub"},{"categories":["modern-search"],"contents":"In the latest release of PnP Modern Search (4.5.3), we\u0026rsquo;ve added the ability to connect two Search Results Web Parts together. It went quite unnoticed at the time but it actually unlocks a lot of cool new scenarios requiring dynamic filtering, for instance, to build dynamic dashboards experiences. In this article I will review how this works and how you can benefit from this feature for your search pages.\nHow to connect two search results Web Parts together? Prerequisite: understand how dynamic filering works When you connect two Web Parts together, you basically match a value from a selected source item property against a value contained in a property target items. In other terms, when an item is selected:\n \u0026ldquo;Retrieve all items where the property X contains the value of the property Y of the selected item\u0026rdquo;\n Notice that properties don\u0026rsquo;t need to be necessarily the same in both sides as two different properties can share common values. You can already experience this configuration with the dynamic filtering feature for List and Library default Web Parts:\nThe concept is the same with PnP Search Results Web Parts, except you get more flexibility on how the query is made.\nExample with a taxonomy column To illustrate the item selection feature between two Search Results Web Parts, I take the example of a devices catalog that should display the related documentation when the user select one or more device from the list:\nTo make the link between items, the two lists share a same managed metadata column named \u0026ldquo;Related product\u0026rdquo;:\nBeacuse, we use SharePoint search, I also created a corresponding managed property in the search schema using the term ID property (not the text one):\nThe Search Results Web Parts connection configuration is always done in two steps.\n1- Allow item selection in source Web Part The first step is to configure a source Web Part where items will be selected and then enable the item selection feature in the layout configuration page under Common options:\n Item selection is available for all layouts.\n You can also turn on/off multiple selection for results.\n2- Configure connection on target Web Part(s) The second step is to configure the connection in the target Web Parts, the one(s) where results should be filtered by selected items of the source one. In my case the documents related to a specific product. To achieve this, I add a new Web Part on the page and configure a base query to retrieve documents that will be filtered:\n You can connect multiple target Web Parts to a single source.\n The connection with the source Search Results Web Part is done on the third configuration page in the property pane. From here you have to set:\n The source search Results Web Part to use. If you select anything else than a search results Web Part, the configuration is simply reset. The property of the selected item containing the value to use as filter. In my case, I select the managed property name corresponding to my column. The property of items used to match the selected value. In my case, because the two lists share the same column, I can simply use the same managed property name (RefinableString04).   To see the list of the available values, the source/target Web Part must have results retrieved and properties added in the selected properties in the data source.   The selection mode. By default the filtering is done using refinement filters just like if you\u0026rsquo;ve selected a value from the Search Filters Web Part. However, this mode has two constraints:\n The target Web Part must display results initially (because you can\u0026rsquo;t refine empty results basically:/). The target property (i.e. destination field name) must be a refinable managed property in the search schema. It won\u0026rsquo;t work otherwise.    If you\u0026rsquo;ve enabled mutli selection in the source Web Part, the operator you want to use between selected values (AND/OR).\n  After doing these configurations, you should be able to filter (refine actually) values in the target Web Part.\nUse the manual selection mode The default selection mode constraints you to display a set of results at page load in target Web Parts which is, in some cases, not the behavior you neccessarily want in terms of UI experience. To bypass this limitation, a manual selection mode is available. When enabled, it is up to you to configure the query using the query template field in the data source and available tokens:\nQuery template in manual mode\n{? Path:{site.absoluteUrl}/Documentation {|RefinableString04:{filters.RefinableString04.valueAsText}} IsDocument:1}\nExplanation:\n {? ... }: Conditional operator. If a token is not resolved in the enclosed expression, the query won\u0026rsquo;t be submitted to the search engine (meaning you won\u0026rsquo;t get any default results). {| ... }: \u0026lsquo;OR\u0026rsquo; operator token that will expand the conditions with the OR KQL operator. Use {\u0026amp; ... } if you want and AND condition. {filters.RefinableString04.valueAsText}: Token that will be replaced dynamically by the selected item value. Only string values are supported here.  With this configuration, you won\u0026rsquo;t get any result at page load but only when you will select an item in the source Web Part. To completely hide target Web Part(s), you can also enable the \u0026quot;\u0026quot; option.\nConnection with native SharePoint \u0026lsquo;List\u0026rsquo; Or \u0026lsquo;Library\u0026rsquo; Web Parts The cool thing about the item selection feature is it supports connection with OOTB SharePoint Web Parts. It means you can configure a \u0026lsquo;List\u0026rsquo; or \u0026lsquo;Library\u0026rsquo; Web Part as source and use the PnP Search Results Web Part(s) as targets.\n OOTB SharePoint Web Parts can only be used as source, not targets.\n In my previous example, I could totally substitute the PnP Search Results displaying devices from he list by the list itself using hte \u0026lsquo;List\u0026rsquo; Web Part. Also, because I\u0026rsquo;ve mapped the \u0026lsquo;Related Product\u0026rsquo; managed metadata column to the property RefinableString04 using the ows_taxId_\u0026lt;columnName\u0026gt;, I can perform the match based on the taxonomy term ID. Simple as that. The other configurations remaisn exactly the same, only the source changes.\nThis type of connection supports single and multi value selection as well:\nConclusion The new item selection feature of PnP Modern Search solution now unlocks many new scenarios to build amazing dynamic search experiences. Looking forward to see how the community will use it!\nFor more information:\n Item selection feature documentation PnP Modern Search 4.5.4  ","date":"February 13, 2022","image":null,"permalink":"/post/modern-search-focus-item-selection/","title":"PnP Modern Search: focus on item selection feature"},{"categories":["general"],"contents":"Remember thecollaborationcorner.com? Wel\u0026hellip;it\u0026rsquo;s been quite a while since my last blog post. Actually I closed my previous blog (thecollaborationcorner.com) almost 3 years ago due to a lack of time and motivation. After a quite busy period for me since the last two past years (two new born in 3 years!), I finally decided to go forward and open a blog again, but this time using cool new tools. The last one was built with Wordpress and became quite difficult to manage through years. That\u0026rsquo;s why I chose Hugo to do the job this time.\n     I was first hesitating with Jekyll at some point but finally found Hugo way easier and cleaner to use, at least for me, especially the setup with GitHub pages.\nWhat you\u0026rsquo;ll find on this blog? For those who know me personally, they probably know I\u0026rsquo;m not a huge fan of social medias, unlike some people, I don\u0026rsquo;t write content just for writing content to maintain my \u0026ldquo;online presence\u0026rdquo;. I\u0026rsquo;ve just needed a space to write down my ideas, solutions and other articles related, of course, mainly to the PnP Modern Search activity, but also other topics like Azure, Microsoft 365 and software development practices in general!\nI hope you will enjoy this new blog and I wish you a good year 2022!\nFranck.\n","date":"January 29, 2022","image":null,"permalink":"/post/new-year-new-blog/","title":"New year, new blog!"},{"categories":["modern-search"],"contents":" Finally. It\u0026rsquo;s been a while I wanted to create this content but now it is live! I\u0026rsquo;m glad to announce I\u0026rsquo;ve released a complete course about usage and configuration for the PnP Modern Search solution. This course arrives with the latest 4.5.4 version and should help you to use the solution at its full potential.\nThis course is divided in five main chapters, one for the installation, one for each Web Part and finally, end-to-end tutorials about business scenarios.\n Get started with the PnP Modern Search Solution Use the Search Results Web Part Use the Search Filters Web Part Use the Search Box Web Part Use the Search Verticals Web Part Let\u0026rsquo;s practice!  With these you get near of 3 hours of content reviewing Web Parts configuration.\nCourse player experience  Get Started!   Launch offer Get a 20% off until Feb 28 2022 with the code PNPSEARCH2022\n Regularly updated content This course is an evolving material. Some lessons or chapters may change or be updated in the future as long the solution evolves and/or according your feedback. By getting this course, you have access to new content and updates for free.\nPay attention to the used version and lesson description For all lessons, the used version of the PnP Modern Search is always mentionned in the lesson description. Make sure you are using the same version to ensure the same experience. Some features in lessons are quite new and not necessarily available for previous versions.\nAlso, key notions are always summarized in the description to help to quickly identify important things to know.\nGet some help when needed If you get stuck with something or don\u0026rsquo;t understand a configuration presented in a lesson, you can still start the discussion using the button on the top right corner.\nI will be more than happy to provide you some answers an guidance. With this course, you have a privileged channel with the main author so use it when needed.\nIf you encounter a bug or you a not able to reproduce behavior demonstrated in a lesson, you can still open a new issue on GitHub . We will review it sooner as we can.\nYour feedback is important! Actually, as a PnP Modern Search user you are the best person to provide your feedback about features and usability. By doing this, you help me to build a better course and a better solution for the community.\nI also plan to release an other course about all customizations scenarios you can have with the PnP Modern Search but later this year as it take quite some time to build.\n","date":"January 29, 2022","image":null,"permalink":"/post/new-pnp-modern-course/","title":"PnP Modern Search course is now available!"},{"categories":null,"contents":"H1 Heading H2 Heading H3 Heading H4 Heading H5 Heading H6 Heading  Paragraph Did you come here for something in particular or just general Riker-bashing? And blowing into maximum warp speed, you appeared for an instant to be in two places at once. We have a saboteur aboard. We know you’re dealing in stolen ore. But I wanna talk about the assassination attempt on Lieutenant Worf. Could someone survive inside a transporter buffer for 75 years? Fate. It protects fools, little children, and ships.\n Emphasis :  Did you come here for something in particular or just general Did you come here for something in particular Did you come here Did you come here for something in particular Did you come here for something in particular  Did you come here for something in particular URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).   Ordered list  you appeared for an instant to be in two places at once. We have a saboteur aboard. you appeared for an instant to be in two places at once.   Unordered list  Quisque sem ipsum, placerat nec tortor vel, blandit vestibulum libero. Morbi sollicitudin viverra justo Blandit vestibulum libero. Morbi sollicitudin viverra justo Placerat nec tortor vel, blandit vestibulum libero. Morbi sollicitudin viverra justo   Code and Syntax Highlighting : var s = \u0026#34;JavaScript syntax highlighting\u0026#34;; const plukDeop = key =\u0026gt; obj =\u0026gt; key.split const compose = key =\u0026gt; obj =\u0026gt; key.split alert(s); var s = \u0026#34;JavaScript syntax highlighting\u0026#34;; const plukDeop = key =\u0026gt; obj =\u0026gt; key.split const compose = key =\u0026gt; obj =\u0026gt; key.split alert(s);  Buttons Button  Quote  “Did you come here for something in particular or just general Riker-bashing? And blowing into maximum warp speed, you appeared for an instant to be in two places at once.”\n  Notice : This is a simple note.\n This is a simple tip.\n This is a simple info.\n This is a simple warning.\n  Tab :  Title goes here Did you come here for something in particular or just general Riker-bashing? And blowing into maximum warp speed, you appeared for an instant to be in two places at once. We have a saboteur aboard. We know you’re dealing in stolen ore. But I wanna talk about the assassination attempt on Lieutenant Worf.  Title goes here Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.  Title goes here Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo     Table :    # First Last Handle     1 Row:1 Cell:1 Row:1 Cell:2 Row:1 Cell:3   2 Row:2 Cell:1 Row:2 Cell:2 Row:2 Cell:3   3 Row:3 Cell:1 Row:3 Cell:2 Row:3 Cell:3     Collapse : collapse 1    Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur    collapse 2    Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur    collapse 3    Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur adipisicing elit. Lorem ipsum dolor sit amet consectetur     Image https://www.franckcornu.com/images/post/post-2.jpg does not exist  Youtube :   ","date":"January 1, 1","image":null,"permalink":"/elements/","title":"Elements"},{"categories":null,"contents":"I\u0026rsquo;ve been SharePoint \u0026amp; Microsoft 365 consultant for almost 10 years now and Office Development MVP, I’ve worked for several companies in many fields especially intranet solutions. Involved in the Pattern \u0026amp; Practices initiative, I’m the main author of the PnP Modern Search solution.\nYou won\u0026rsquo;t find any better source of information than me about this solution ;)\n","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/author/franck-cornu/","title":"Franck Cornu"},{"categories":null,"contents":"I\u0026rsquo;ve been SharePoint \u0026amp; Microsoft 365 consultant for almost 10 years now and Office Development MVP, I’ve worked for several companies in many fields especially intranet solutions. Involved in the Pattern \u0026amp; Practices initiative, I’m the main author of the PnP Modern Search solution.\nYou won\u0026rsquo;t find any better source of information than me about this solution ;)\n     De tous ceux qui n\u0026rsquo;ont rien à dire les plus agréables sont ceux qui se taisent\n-Coluche (french humorist)   ","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/about/","title":"Hello there, I am Franck Cornu"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/home/","title":"Homepage"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/full/","title":"Homepage Full"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/full-left/","title":"Homepage Full Left"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/full-right/","title":"Homepage Full Right"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/grid/","title":"Homepage Grid"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/grid-left/","title":"Homepage Grid Left"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/grid-right/","title":"Homepage Grid Right"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/list/","title":"Homepage List"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/list-left/","title":"Homepage List Left"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/homepage/list-right/","title":"Homepage List Right"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/404/","title":"No Search Found"},{"categories":null,"contents":"","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/search/","title":"Search Results"},{"categories":null,"contents":"Ask Us Anything Or just Say Hi, Rather than just filling out a form, Sleeknote also offers help to the user with links directing them to find additional information or take popular actions.\n","date":"January 1, 1","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"/images/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_q90_h2_box_3.webp\" alt=\"\" class=\"img-fluid\" width=\"650\" height=\"\" onerror=\"this.onerror='null';this.src='\\/images\\/author_hu9b02e0e5fa61fa4710f0e85bb0f4dbed_853600_650x0_resize_box_3.png'\"\u003e\n \n \n \n\n","permalink":"/contact/","title":"Talk To Me Anytime :)"}]